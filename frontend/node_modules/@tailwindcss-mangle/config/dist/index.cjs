'use strict';

const path = require('node:path');
const fs = require('node:fs/promises');
const c12 = require('c12');
const process = require('node:process');
const shared = require('@tailwindcss-mangle/shared');
const isCssRequest = require('is-css-request');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const path__default = /*#__PURE__*/_interopDefaultCompat(path);
const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
const process__default = /*#__PURE__*/_interopDefaultCompat(process);

const defaultPipelineInclude = ["**/*.{html,js,ts,jsx,tsx,vue,svelte,astro,elm,php,phtml,mdx,md}", isCssRequest.CSS_LANGS_RE];
const defaultPipelineExclude = [/[\\/](node_modules|dist|\.temp|\.cache|\.vscode)[\\/]/];
function getDefaultPatchConfig() {
  return {
    output: {
      filename: ".tw-patch/tw-class-list.json",
      removeUniversalSelector: true,
      loose: true
    },
    tailwindcss: {}
  };
}
function getDefaultMangleUserConfig() {
  return {
    mangleClassFilter: shared.defaultMangleClassFilter,
    include: defaultPipelineInclude,
    exclude: defaultPipelineExclude,
    disabled: process__default.env.NODE_ENV === "development",
    classListPath: ".tw-patch/tw-class-list.json",
    classMapOutput: {
      enable: false,
      filename: ".tw-patch/tw-map-list.json",
      loose: true
    },
    preserveFunction: []
  };
}
function getDefaultUserConfig() {
  return {
    patch: getDefaultPatchConfig(),
    mangle: getDefaultMangleUserConfig()
  };
}

const configName = "tailwindcss-mangle";

function getConfig(cwd) {
  return c12.loadConfig({
    name: configName,
    defaults: {
      ...getDefaultUserConfig()
    },
    cwd
  });
}
const defineConfig = c12.createDefineConfig();
function initConfig(cwd) {
  return fs__default.writeFile(
    path__default.resolve(cwd, `${configName}.config.ts`),
    `import { defineConfig } from 'tailwindcss-patch'

export default defineConfig({})
`,
    "utf8"
  );
}

exports.configName = configName;
exports.defineConfig = defineConfig;
exports.getConfig = getConfig;
exports.getDefaultMangleUserConfig = getDefaultMangleUserConfig;
exports.getDefaultPatchConfig = getDefaultPatchConfig;
exports.getDefaultUserConfig = getDefaultUserConfig;
exports.initConfig = initConfig;
