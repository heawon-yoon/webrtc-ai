'use strict';

const process = require('node:process');
const cac = require('cac');
const config = require('@tailwindcss-mangle/config');
const index = require('./shared/tailwindcss-patch.3f156bec.cjs');
require('node:path');
require('fs-extra');
require('@babel/types');
require('resolve');
require('semver');
require('consola');
require('@babel/generator');
require('@babel/traverse');
require('@babel/parser');
require('postcss');
require('lilconfig');
require('jiti');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const process__default = /*#__PURE__*/_interopDefaultCompat(process);
const cac__default = /*#__PURE__*/_interopDefaultCompat(cac);

function init() {
  const cwd = process__default.cwd();
  return config.initConfig(cwd);
}
const cli = cac__default();
cli.command("install", "patch install").action(() => {
  const twPatcher = new index.TailwindcssPatcher({
    patch: index.getPatchOptions()
  });
  twPatcher.patch();
});
cli.command("init").action(async () => {
  await init();
  index.logger.success(`\u2728 ${config.configName}.config.ts initialized!`);
});
cli.command("extract").action(async () => {
  const { config: config$1 } = await config.getConfig();
  if (config$1) {
    const twPatcher = new index.TailwindcssPatcher();
    const p = await twPatcher.extract(config$1.patch);
    index.logger.success(`\u2728 tailwindcss-patch extract success! file path: ${p}`);
  }
});
cli.help();
cli.parse();
